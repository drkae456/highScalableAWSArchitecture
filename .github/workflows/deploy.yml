name: Deploy High Scalable AWS Architecture

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-southeast-4
  TERRAFORM_VERSION: 1.6.0

jobs:
  terraform-setup:
    name: Setup Infrastructure with Terraform
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="github_repo=${{ github.repository }}" \
            -var="aws_region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve \
            -var="github_repo=${{ github.repository }}" \
            -var="aws_region=${{ env.AWS_REGION }}"

  cleanup-on-failure:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [terraform-setup]
    if: failure() && github.ref == 'refs/heads/main'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup Failed Stacks
        run: |
          echo "Cleaning up failed deployments..."

          # Function to check if stack exists and is in a failed state
          check_and_cleanup_stack() {
            local stack_name=$1
            local region=$2
            
            if aws cloudformation describe-stacks --stack-name $stack_name --region $region >/dev/null 2>&1; then
              local status=$(aws cloudformation describe-stacks --stack-name $stack_name --region $region --query 'Stacks[0].StackStatus' --output text)
              echo "Stack $stack_name status: $status"
              
              # Delete stack if it's in a failed state
              if [[ "$status" == *"FAILED"* ]] || [[ "$status" == *"ROLLBACK"* ]]; then
                echo "Deleting failed stack: $stack_name"
                aws cloudformation delete-stack --stack-name $stack_name --region $region
                
                # Wait for deletion to complete
                echo "Waiting for stack deletion to complete..."
                aws cloudformation wait stack-delete-complete --stack-name $stack_name --region $region || echo "Stack deletion wait failed or timed out"
              fi
            else
              echo "Stack $stack_name does not exist"
            fi
          }

          # List any remaining CloudFormation stacks with our naming pattern
          echo "Remaining stacks with 'high-scalable' prefix:"
          aws cloudformation list-stacks --region ${{ env.AWS_REGION }} --query 'StackSummaries[?contains(StackName, `high-scalable`) && StackStatus != `DELETE_COMPLETE`].[StackName,StackStatus]' --output table || true
