AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AWS application stack in ap-southeast-4:
  S3, KMS, DynamoDB, EventBridge, Lambda (container),
  API Gateway, WAF, CloudFront.

Parameters:
  EcrImageUri:
    Type: String
    Description: ECR URI for FastAPI container
  LambdaFunctionName:
    Type: String
    Default: FastApiFunction
  TableName:
    Type: String
    Default: OrdersTable
  GlobalWebACLArn:
    Type: String
    Description: ARN of WAFv2 WebACL (global, created in us-east-1)

Resources:
  # Encryption key
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      Description: CMK for all at-rest encryption

  # Static assets bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-static-assets"
      VersioningConfiguration: { Status: Enabled }
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # DynamoDB
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - { AttributeName: pk, AttributeType: S }
        - { AttributeName: sk, AttributeType: S }
      KeySchema:
        - { AttributeName: pk, KeyType: HASH }
        - { AttributeName: sk, KeyType: RANGE }
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref KMSKey
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # EventBridge bus
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${AWS::StackName}-bus"

  # IAM role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:Create*
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:ap-southeast-4:${AWS::AccountId}:log-group:/aws/lambda/*:log-stream:*"
              - Effect: Allow
                Action: events:PutEvents
                Resource: "*"
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action: dynamodb:*
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt KMSKey.Arn
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  # Security group in imported VPC
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow outbound
      VpcId: !ImportValue NetworkStack-VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # FastAPI Lambda
  FastApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      PackageType: Image
      Code: { ImageUri: !Ref EcrImageUri }
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SubnetIds:
          - !ImportValue NetworkStack-PrivateSubnetAId
          - !ImportValue NetworkStack-PrivateSubnetBId
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
          EVENT_BUS_NAME: !Ref EventBus
          S3_BUCKET: !Ref S3Bucket

  # HTTP API
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}-api"
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: ["*"]
        AllowMethods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
        AllowHeaders: ["Content-Type", "Authorization"]

  ApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          - arn:aws:apigateway:ap-southeast-4:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt FastApiFunction.Arn
      PayloadFormatVersion: "2.0"

  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${ApiIntegration}"

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: prod
      AutoDeploy: true

  PermissionApiLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FastApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:ap-southeast-4:${AWS::AccountId}:${ApiGateway}/*/*/*

  # CloudFront
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig: {}
          - Id: ApiOrigin
            DomainName: !Sub "${ApiGateway}.execute-api.ap-southeast-4.amazonaws.com"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: ApiOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: true
            Headers: ["*"]
        CacheBehaviors:
          - PathPattern: "/static/*"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: false
              Headers: []
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        WebACLId: !Ref GlobalWebACLArn

Outputs:
  ApiUrl:
    Description: HTTP API endpoint
    Value: !Sub "https://${ApiGateway}.execute-api.ap-southeast-4.amazonaws.com/prod/"
  CloudFrontDomainName:
    Description: CloudFront distribution domain name
    Value: !GetAtt CloudFrontDistribution.DomainName
