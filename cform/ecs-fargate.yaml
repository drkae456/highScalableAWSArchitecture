AWSTemplateFormatVersion: "2010-09-09"
Description: >
  ECS Fargate deployment for FastAPI application with ALB

Parameters:
  EcrImageUri:
    Type: String
    Description: ECR URI for FastAPI container
    Default: 650777358419.dkr.ecr.ap-southeast-4.amazonaws.com/high-scalable-aws-app:apprunner
  ServiceName:
    Type: String
    Default: fastapi-ecs-service
  ApplicationStackName:
    Type: String
    Default: high-scalable-application
    Description: Name of the application stack that contains shared resources

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-task"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: fastapi-container
          Image: !Ref EcrImageUri
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: TABLE_NAME
              Value: !ImportValue
                Fn::Sub: "${ApplicationStackName}-DynamoDBTable"
            - Name: EVENT_BUS_NAME
              Value: !ImportValue
                Fn::Sub: "${ApplicationStackName}-EventBus"
            - Name: S3_BUCKET
              Value: !ImportValue
                Fn::Sub: "${ApplicationStackName}-S3Bucket"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Task Role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TaskRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !Sub
                  - "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}"
                  - TableName: !ImportValue
                      Fn::Sub: "${ApplicationStackName}-DynamoDBTable"
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub
                  - "arn:aws:s3:::${BucketName}/*"
                  - BucketName: !ImportValue
                      Fn::Sub: "${ApplicationStackName}-S3Bucket"
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !Sub
                  - "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KeyId}"
                  - KeyId: !ImportValue
                      Fn::Sub: "${ApplicationStackName}-KMSKey"

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}"
      RetentionInDays: 7

  # Security Group for ECS Tasks
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !ImportValue NetworkStack-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  # Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !ImportValue NetworkStack-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-alb"
      Scheme: internet-facing
      Type: application
      Subnets:
        - !ImportValue NetworkStack-PublicSubnetAId
        - !ImportValue NetworkStack-PublicSubnetBId
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-tg"
      Port: 8000
      Protocol: HTTP
      VpcId: !ImportValue NetworkStack-VpcId
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !ImportValue NetworkStack-PrivateSubnetAId
            - !ImportValue NetworkStack-PrivateSubnetBId
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: fastapi-container
          ContainerPort: 8000
          TargetGroupArn: !Ref TargetGroup

Outputs:
  LoadBalancerUrl:
    Description: Application Load Balancer URL
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}"
  SwaggerUrl:
    Description: FastAPI Swagger UI URL
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}/docs"
  HealthCheckUrl:
    Description: Health check URL
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}/health"
